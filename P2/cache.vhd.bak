library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity cache is
generic(
	ram_size : INTEGER := 32768;
);
port(
	clock : in std_logic;
	reset : in std_logic;
	
	-- Avalon interface --
	s_addr : in std_logic_vector (31 downto 0);
	s_read : in std_logic;
	s_readdata : out std_logic_vector (31 downto 0);
	s_write : in std_logic;
	s_writedata : in std_logic_vector (31 downto 0);
	s_waitrequest : out std_logic; 
    
	m_addr : out integer range 0 to ram_size-1;
	m_read : out std_logic;
	m_readdata : in std_logic_vector (7 downto 0);
	m_write : out std_logic;
	m_writedata : out std_logic_vector (7 downto 0);
	m_waitrequest : in std_logic
);
end cache;

architecture arch of cache is

-- declare signals here
-- The States
type states is (idle,mem_read,mem_write,trans_complete);
signal current_state : states;

type cache is array(0 to 31) of std_logic_vector(135 downto 0);
signal cache_total: cache;

begin

-- make circuits here
fsm: process (clk, reset)
constant word_size: integer := 32;
variable count: integer := 0;
variable index: integer := 0;
variable cache_block: std_logic_vector(135 downto 0);
variable address_tag: std_logic_vector(5 downto 0);
variable cache_block_tag: std_logic_vector(5 downto 0);
variable valid: std_logic := 0;
variable dirty: std_logic := 0;
variable word_offset: integer := 0;
begin
	if (reset = '1') then 
		current_state <= idle;
		s_waitrequest <= '1';
		count := 0;

	elsif (rising_edge(clk)) then
		case current_state is
			when idle =>
				index := to_integer(unsigned(s_addr(8 downto 4)));
				cache_block := cache_total(index);
				address_tag := s_addr(14 downto 9);
				cache_block_tag := cache_block(133 downto 128);
				valid := cache_block(134);
				word_offset := to_integer(unsigned(s_addr(3 downto 2)));
				if (s_read = '1' and (address_tag = cache_block_tag) and valid = '1') then
					s_readdata <= cache_block((((word_offset + 1) * word_size) - 1) downto (word_offset * word_size));
					s_waitrequest <= '0';
					current_state <= trans_complete;
				elsif (s_write = '1' and ((address_tag = cache_block_tag) and valid = '1')) then
					 cache_block := (	(((word_offset + 1) * word_size) - 1) downto (word_offset * word_size) => s_writedata,   
                                    				134 => '1',
								135 => '1');
					cache_total(index) <= cache_block;
					s_waitrequest <= '0';
					current_state <= trans_complete;
				elsif ((s_read = '1' or s_write = '1') and not((address_tag = cache_block_tag) and valid = '1')) then
					m_read <= '1';
					m_addr <= (	31 downto 4 => s_addr(31 downto 4),   
                                    			others => '0');
					current_state <= mem_read;
				elsif (s_read = '0' and s_write = '0') then
					current_state <= idle;
				end if; 
			when mem_read =>
			when mem_write =>
			when trans_complete => 
			when others =>
				null;
		end case;
	end if;
end process;

end arch;